// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")  // Required for Neon
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscription  Subscription?
  adReports     AdReport[]
  scrapingJobs  ScrapingJob[]
  metrics       UserMetrics?
  actors        Actor[]        // Created actors
  actorRatings  ActorRating[]  // Ratings given to actors
  userContents  ActorPrompt[] // User-generated content
}

// New Actor model based on actor-card.tsx properties
model Actor {
  id               String         @id @default(uuid())
  title            String
  namespace        String         @unique
  description      String
  authorName       String
  icon             String
  url              String?        // Optional URL for the Actor
  price            Int            @default(1000) // Add price field with default 1000
  tags             String[]
  page             Json?          // Puppeteer script for scraping
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userId           String
  user             User           @relation(fields: [userId], references: [id])
  executions       ActorExecution[]
  ratings          ActorRating[]  // Ratings received from users
}

// New model for user history of prompts
model ActorPrompt {
  id              String   @id @default(uuid())
  namespace       String   // Unique namespace for the prompt
  prompt          String
  responseUrl     String?
  responseScript  String?
  isPublic        Boolean  @default(false) // Whether this content is shared publicly
  usageCount      Int      @default(0)     // Track how many times it was used
  lastUsed        DateTime?
  isFavorite      Boolean  @default(false) // User can mark as favorite
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  userId         String
  user           User     @relation(fields: [userId], references: [id])
}

// New model for user ratings on actors
model ActorRating {
  id          String   @id @default(uuid())
  rating      Float    // User's rating (typically 1-5)
  comment     String?  // Optional review comment
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  actorId     String
  actor       Actor    @relation(fields: [actorId], references: [id])
  
  // Each user can rate an actor only once
  @@unique([userId, actorId])
}

model ActorExecution {
  id          String   @id @default(uuid())
  status      String   // pending, running, completed, failed
  startTime   DateTime @default(now())
  endTime     DateTime?
  results     Json?
  logs        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  actorId     String
  actor       Actor    @relation(fields: [actorId], references: [id])
}

model AdReport {
  id          String      @id @default(uuid())
  platform    String      // Meta, Google, TikTok
  adContent   Json
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  scrapingJob ScrapingJob @relation(fields: [jobId], references: [id])
  jobId       String
  metrics     AdMetrics?
}

// New model for ad metrics
model AdMetrics {
  id            String    @id @default(uuid())
  impressions   Int       @default(0)
  clicks        Int       @default(0)
  engagement    Float     @default(0.0)  // Engagement rate
  sentiment     Float?    // Sentiment score from AI analysis
  performance   Json?     // Detailed performance metrics
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  adReport      AdReport  @relation(fields: [adReportId], references: [id])
  adReportId    String    @unique
}

// New model for user metrics
model UserMetrics {
  id                String   @id @default(uuid())
  totalScrapingJobs Int      @default(0)
  totalAdReports    Int      @default(0)
  avgJobDuration    Float?   // Average job duration in seconds
  lastActivityDate  DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @unique
}

enum SubscriptionPlan {
  Basic
  Pro
  Business
}

// Add transaction types for deposit history
enum TransactionType {
  Deposit
  Usage
  Refund
}

model Subscription {
  id              String           @id @default(uuid())
  plan            SubscriptionPlan @default(Basic)
  status          String           @default("active")
  balance         Float            @default(5.0)  // Default $5 for Basic/Freemium plan
  startDate       DateTime         @default(now())
  endDate         DateTime         @default(now())
  requestLimit    Int              @default(10)  // Monthly request limit
  dataPointLimit  Int              @default(10)  // Max data points per request
  requestCount    Int              @default(0)   // Current month's request count
  lastResetDate   DateTime         @default(now()) // For monthly reset
  user            User?            @relation(fields: [userId], references: [id])
  userId          String?          @unique
  transactions    Transaction[]    // Transaction history for deposits and usage
}

// New model to track payment transactions
model Transaction {
  id              String           @id @default(uuid())
  amount          Float            // Amount of transaction (positive for deposits, negative for usage)
  type            TransactionType
  description     String?
  createdAt       DateTime         @default(now())
  subscription    Subscription     @relation(fields: [subscriptionId], references: [id])
  subscriptionId  String
}

model ScrapingJob {
  id        String     @id @default(uuid())
  status    String     // pending, running, completed, failed
  platform  String     // Meta, Google, TikTok
  config    Json
  startTime DateTime?
  endTime   DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  adReports AdReport[]
  metrics   JobMetrics?
}

// New model for job metrics
model JobMetrics {
  id              String      @id @default(uuid())
  duration        Int?        // Job duration in seconds
  adsScraped      Int         @default(0)
  successRate     Float       @default(0.0)  // Percentage of successful scrapes
  errorCount      Int         @default(0)
  resourceUsage   Json?       // CPU, memory usage, etc.
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  scrapingJob     ScrapingJob @relation(fields: [scrapingJobId], references: [id])
  scrapingJobId   String      @unique
}

// npx prisma generate
// npx prisma db push