// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")  // Required for Neon
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscription  Subscription?
  adReports     AdReport[]
  scrapingJobs  ScrapingJob[]
  metrics       UserMetrics?
  actors        Actor[]        // New relation to actors
}

// New Actor model based on actor-card.tsx properties
model Actor {
  id               String   @id @default(uuid())
  title            String
  namespace        String   @unique
  description      String
  stars            String
  rating           Float
  authorName       String
  authorBadgeColor String
  icon             String
  iconBg           String
  script           Json     // Puppeteer script for scraping
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  executions       ActorExecution[]
}

// New model for tracking actor executions
model ActorExecution {
  id          String   @id @default(uuid())
  status      String   // pending, running, completed, failed
  startTime   DateTime @default(now())
  endTime     DateTime?
  results     Json?
  logs        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  actorId     String
  actor       Actor    @relation(fields: [actorId], references: [id])
}

model AdReport {
  id          String      @id @default(uuid())
  platform    String      // Meta, Google, TikTok
  adContent   Json
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  scrapingJob ScrapingJob @relation(fields: [jobId], references: [id])
  jobId       String
  metrics     AdMetrics?
}

// New model for ad metrics
model AdMetrics {
  id            String    @id @default(uuid())
  impressions   Int       @default(0)
  clicks        Int       @default(0)
  engagement    Float     @default(0.0)  // Engagement rate
  sentiment     Float?    // Sentiment score from AI analysis
  performance   Json?     // Detailed performance metrics
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  adReport      AdReport  @relation(fields: [adReportId], references: [id])
  adReportId    String    @unique
}

// New model for user metrics
model UserMetrics {
  id                String   @id @default(uuid())
  totalScrapingJobs Int      @default(0)
  totalAdReports    Int      @default(0)
  avgJobDuration    Float?   // Average job duration in seconds
  lastActivityDate  DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @unique
}

enum SubscriptionPlan {
  Basic
  Pro
  Business
}

model Subscription {
  id              String           @id @default(uuid())
  plan            SubscriptionPlan @default(Basic)
  status          String           @default("active")
  startDate       DateTime         @default(now())
  endDate         DateTime         @default(now())
  requestLimit    Int              @default(10)  // Monthly request limit
  dataPointLimit  Int              @default(10)  // Max data points per request
  requestCount    Int              @default(0)   // Current month's request count
  lastResetDate   DateTime         @default(now()) // For monthly reset
  user            User?            @relation(fields: [userId], references: [id])
  userId          String?          @unique
}

model ScrapingJob {
  id        String     @id @default(uuid())
  status    String     // pending, running, completed, failed
  platform  String     // Meta, Google, TikTok
  config    Json
  startTime DateTime?
  endTime   DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  adReports AdReport[]
  metrics   JobMetrics?
}

// New model for job metrics
model JobMetrics {
  id              String      @id @default(uuid())
  duration        Int?        // Job duration in seconds
  adsScraped      Int         @default(0)
  successRate     Float       @default(0.0)  // Percentage of successful scrapes
  errorCount      Int         @default(0)
  resourceUsage   Json?       // CPU, memory usage, etc.
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  scrapingJob     ScrapingJob @relation(fields: [scrapingJobId], references: [id])
  scrapingJobId   String      @unique
}

// npx prisma generate
// npx prisma db push